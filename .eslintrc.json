{
  "root": true,
  "ignorePatterns": ["**/*"],
  "extends": ["prettier"],
  "plugins": ["@nx", "prettier"],
  "rules": {
    "prettier/prettier": "error"
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "extends": [
        "plugin:@nx/typescript",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/strict",
        "plugin:lit/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript"
      ],
      "plugins": ["unused-imports", "@typescript-eslint"],
      "parser": "@typescript-eslint/parser",
      "rules": {
        // nx rules
        "@nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": ["@myorg/types"],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ],

        // common
        "block-scoped-var": "error",
        "eqeqeq": "error",
        "no-var": "error",
        "prefer-const": "error",
        "eol-last": "error",
        "prefer-arrow-callback": "error",
        "no-trailing-spaces": "error",
        "no-restricted-properties": [
          "error",
          {
            "object": "describe",
            "property": "only"
          },
          {
            "object": "it",
            "property": "only"
          }
        ],

        // ensure organized imports
        "unused-imports/no-unused-imports-ts": "error",
        "import/order": [
          "error",
          {
            "groups": ["builtin", "external", ["sibling", "parent"], "index"],
            "pathGroups": [
              {
                "pattern": "$app/**",
                "group": "external"
              },
              {
                "pattern": "~/**",
                "group": "sibling"
              }
            ],
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            },
            "newlines-between": "always"
          }
        ],
        "import/no-unresolved": [
          "error",
          {"ignore": ["\\?inline$", "^@myorg/"]}
        ],

        // disable rules from typescript recommended
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-warning-comments": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/explicit-function-return-type": "off",

        // typescript rules
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "object": {
                "message": "Object is not specific enough. Either create an actual type for it or use unknown",
                "fixWith": "unknown"
              }
            },
            "extendDefaults": true
          }
        ],
        "lines-between-class-members": [
          "error",
          "always",
          {
            "exceptAfterSingleLine": true
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "variable",
            "modifiers": ["destructured"],
            "format": null
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          }
        ],
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array-simple"
          }
        ],

        // lit element rules
        "lit/prefer-nothing": "error",
        "lit/no-native-attributes": "error",
        "lit/quoted-expressions": "error",
        "lit/no-this-assign-in-render": "error",
        "lit/no-useless-template-literals": "error"
      }
    },
    {
      "files": ["*/.spec.ts"],
      "rules": {
        "no-console": "error"
      }
    },
    {
      "files": ["*.mdx"],
      "extends": ["plugin:mdx/recommended"],
      "settings": {
        "mdx/code-blocks": true
      }
    }
  ]
}
